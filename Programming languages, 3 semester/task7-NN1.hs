{- Определяем функцию трех аргументов результатом которой будет
 - заданная последовательность
 - Последовательность организуем как список из трех заданных
 - элементов к которому присоединен результат применения специальной
 - функции к трем подспискам списка и списку целых чисел
 -}
threeVarDepend a0 a1 a2 = seqn
  where
    -- заданная последовательность
    -- из четырех последовательностей собираем две последовательности пар
    -- к которым поэлементно применяем функцию nextEl
    seqn = [a0, a1, a2] 
           ++ zipWith nextEl ( zipWith (,) seqn (tail seqn) )
                             ( zipWith (,) (tail $ tail seqn) [2..] )
    -- функция принимает в качестве аргументов две пары чисел
    -- n - номер элемента a2 в последовательности
    nextEl (a0, a1) (a2, n)
      | a2 <= 0        = (a2 + a1 - 2 * a0 * a0) `mod` 100
      | n `mod` 2 == 0 = a2 - a1
      | otherwise      = (a1 + 2 * a0) `mod` 5

main = do
  print $ take 15 $ threeVarDepend 0 1 (-1)
  print $ take 15 $ threeVarDepend 0 0 1
  print $ drop 100 $ take 115 $ threeVarDepend 0 1 (-1)
  print $ drop 100 $ take 115 $ threeVarDepend 1 (-1) (-1)
  print $ drop 1000 $ take 1015 $ threeVarDepend (197) (-11) (-112)



